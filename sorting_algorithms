#include <iostream>
#include <vector>
using namespace std;

void bubbleSort(int arr[], int n) {
    cout << "Bubblesort Sort" << endl;
    bool swapped;
    for (int i = 0; i < n - 1; i++) {
        swapped = false;
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                swap(arr[j], arr[j + 1]);
                swapped = true;
            }
        }

        if (!swapped) {
            break;
        }
    }
}

void selectionSort(int arr[], int n) {
    cout << "Selection Sort" << endl;
    for (int i = 0; i < n - 1; i++) {
        int smallestIndex = i;
        for (int j = i + 1; j < n; j++) {
            if (arr[j] < arr[smallestIndex]) {
                smallestIndex = j;
            }
        }
        if (i != smallestIndex) {
            swap(arr[i], arr[smallestIndex]);
        }
    }
}

void insertionSort(int arr[], int n) {
    cout << "Insertion Sort" << endl;
    for (int i = 1; i < n; i++) {
        int current = arr[i];
        int prev = i - 1;
        while (prev >= 0 && arr[prev] > current) {
            arr[prev + 1] = arr[prev];
            prev--;
        }
        arr[prev + 1] = current;
    }
}

void merge(vector<int> &arr, int start, int mid, int end) {

    int i = start, j = mid + 1;
    vector<int> temp;
    while (i <= mid && j <= end) {
        if (arr[i] <= arr[j]) {
            temp.push_back(arr[i]);
            i++;
        } else {
            temp.push_back(arr[j]);
            j++;
        }
    }

    while (i <= mid) {
        temp.push_back(arr[i]);
        i++;
    }

    while (j <= end) {
        temp.push_back(arr[j]);
        j++;
    }

    for (int k = 0; k < temp.size(); k++) {
        arr[start + k] = temp[k];
    }
}

void mergeSort(vector<int> &arr, int start, int end) {
    if (start < end) {
        int mid = start + (end - start) / 2;
        mergeSort(arr, start, mid);
        mergeSort(arr, mid + 1, end);

        merge(arr, start, mid, end);
    }
}

// Partition function
int partition(vector<int> &arr, int st, int end) {
    int idx = st - 1;     // Important: start from st-1
    int pivot = arr[end]; // Last element as pivot

    for (int j = st; j < end; j++) {
        if (arr[j] <= pivot) { // Partition rule: larger on left
            idx++;
            swap(arr[j], arr[idx]);
        }
    }
    swap(arr[end], arr[idx + 1]); // Put pivot in correct position
    return idx + 1;
}

// QuickSort function
void quickSort(vector<int> &arr, int st, int end) {
    if (st < end) {
        int pivIdx = partition(arr, st, end);
        quickSort(arr, st, pivIdx - 1);  // Left side
        quickSort(arr, pivIdx + 1, end); // Right side
    }
}

/*
QuickSort = best for general sorting.
MergeSort = best when stability or linked lists are needed.
Insertion Sort = best for small / nearly sorted data.
Selection & Bubble Sort = mostly educational.
O(1) --> The algorithm uses a constant amount of extra memory, regardless of the input size n.
| Algorithm      | Best Case  | Average Case | Worst Case | Space Complexity |
| -------------- | ---------- | ------------ | ---------- | ---------------- |
| Merge Sort     | O(n log n) | O(n log n)   | O(n log n) | O(n)             |Extra arrays during merging, O(logn) negligible compared to O(n).
| Insertion Sort | O(n)       | O(n²)        | O(n²)      | O(1)             |
| Selection Sort | O(n²)      | O(n²)        | O(n²)      | O(1)             |
| Bubble Sort    | O(n)       | O(n²)        | O(n²)      | O(1)             |
| Quick Sort     | O(n log n) | O(n log n)   | O(n²)      | O(log n) \~ O(n) |
*/

int main() {
    int arr[] = {4, 2, 1, 5, 3};
    int n = sizeof(arr) / arr[0];
    bubbleSort(arr, n);
    cout << "Sorted array: ";
    for (int i = 0; i < n; i++)
        cout << arr[i] << " ";
    cout << endl;
    int arr2[5] = {4, 2, 1, 3, 5};
    selectionSort(arr2, n);
    cout << "Sorted array: ";
    for (int i = 0; i < n; i++)
        cout << arr2[i] << " ";

    cout << endl;
    int arr3[5] = {4, 1, 2, 5, 3};
    insertionSort(arr3, n);
    cout << "Sorted array: ";
    for (int i = 0; i < n; i++)
        cout << arr3[i] << " ";
    cout << endl;
    vector<int> v1 = {4, 3, 2, 7, 1};
    cout << "Merge Sorted array: ";
    mergeSort(v1, 0, v1.size() - 1);
    for (int i : v1) {
        cout << i << " ";
    }
    cout << endl;
    vector<int> v2 = {4, 3, 8, 7, 1};
    cout << "Quick Sorted array: ";
    quickSort(v2, 0, v2.size() - 1);
    for (int i : v2) {
        cout << i << " ";
    }
}
